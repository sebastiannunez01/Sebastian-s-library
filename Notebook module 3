Repetition Structures
1. What is a Repetition Structure?
Repetition structures, also known as loops, are essential in programming for executing a sequence of statements multiple times. Two common types are the for loop and the while loop.

Applications:
Automating Tasks: Loops help automate repetitive tasks, reducing manual effort.
Data Processing: Useful for iterating through elements in data structures.
Conditional Execution: Often used in conjunction with if statements to control program flow.
Why Useful in Programming:
Loops enhance the flexibility and efficiency of programs. They allow for the execution of a set of statements repeatedly, making it easier to handle tasks that involve iteration.

Using Loops with if Statements:
python
Copy code
for i in range(5):
    if i % 2 == 0:
        print(f"{i} is even.")
    else:
        print(f"{i} is odd.")
2. Calculating a Running Total
A running total, or cumulative sum, is the sum of values encountered so far during iteration.

Example:
python
Copy code
total = 0
for num in [1, 2, 3, 4, 5]:
    total += num
    print(f"Running total: {total}")
Use Cases:
Accounting: Calculating cumulative expenses or revenues.
Statistics: Accumulating data points over time.
Writing Cleaner Code with Augmented Assignment Operator:
The augmented assignment operator += is a concise way to update a variable's value by adding another value.

Examples:
python
Copy code
# Instead of this:
x = x + 5

# Use this:
x += 5
3. Augmented Assignment Operator
The augmented assignment operators combine an arithmetic operation with an assignment. They are a shorthand way to update a variable's value.

Operators:
+=: Addition
-=: Subtraction
*=: Multiplication
/=: Division
%=: Modulus (remainder)
**=: Exponentiation
//=: Floor division
Examples:
python
Copy code
count = 0
count += 1  # Equivalent to count = count + 1

total = 10
total /= 2  # Equivalent to total = total / 2
4. Formatting Outputs with F-Strings (,.2f)
F-strings provide a concise and readable way to format strings in Python.

Components:
{}: Placeholder for variables.
f: Prefix to indicate an f-string.
,: Adds commas as a thousands separator.
.2f: Formats floating-point numbers with two decimal places.
Examples:
python
Copy code
amount = 1234567.89
formatted_amount = f"{amount:,.2f}"
print(formatted_amount)
Options:
,: Adds commas as a thousands separator.
.2f: Formats floating-point numbers with two decimal places.
<width>: Specifies the width of the value field.
0<width>: Adds zero-padding to the value field.
5. Nested Loops
A nested loop is a loop inside another loop. It is used for more complex iteration scenarios.

Use Cases:
Matrix Operations: Iterating through a 2D array.
Pattern Printing: Creating patterns using nested loops.
Example:
python
Copy code
for i in range(3):
    for j in range(3):
        print(f"({i}, {j})")
This chapter covers various aspects of repetition structures, including their applications, the use of running totals, augmented assignment operators, formatting outputs with f-strings, and the usage of nested loops. These concepts are fundamental for efficient and flexible programming.
