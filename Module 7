#practice problem number 1
pip install tkcalendar

import tkinter as tk
from tkinter import filedialog
import csv
from operator import itemgetter

class StudentReportApp:
    def __init__(self, root):
        self.root = root
        self.root.title("Student Report App")

        self.data = []

        # Create GUI elements
        self.load_button = tk.Button(root, text="Load CSV", command=self.load_csv)
        self.load_button.pack(pady=10)

        self.report_listbox = tk.Listbox(root, width=40, height=10)
        self.report_listbox.pack(pady=10)

        self.export_button = tk.Button(root, text="Export Report", command=self.export_report)
        self.export_button.pack(pady=10)

    def load_csv(self):
        file_path = filedialog.askopenfilename(filetypes=[("CSV Files", "*.csv")])

        if file_path:
            self.data = self.read_csv(file_path)
            self.calculate_average()
            self.sort_data()
            self.display_report()

    def read_csv(self, file_path):
        with open(file_path, "r") as file:
            reader = csv.DictReader(file)
            data = [row for row in reader]
        return data

    def calculate_average(self):
        for student in self.data:
            math = int(student["Math"])
            english = int(student["English"])
            history = int(student["History"])
            student["Average"] = (math + english + history) / 3

    def sort_data(self):
        self.data.sort(key=itemgetter("Average"), reverse=True)

    def display_report(self):
        self.report_listbox.delete(0, tk.END)
        for student in self.data:
            name = student["Name"]
            average = round(student["Average"], 2)
            self.report_listbox.insert(tk.END, f"{name}: {average}")

    def export_report(self):
        file_path = filedialog.asksaveasfilename(defaultextension=".csv", filetypes=[("CSV Files", "*.csv")])

        if file_path:
            with open(file_path, "w", newline="") as file:
                writer = csv.writer(file)
                writer.writerow(["Name", "Average"])
                for student in self.data:
                    writer.writerow([student["Name"], round(student["Average"], 2)])

if __name__ == "__main__":
    root = tk.Tk()
    app = StudentReportApp(root)
    root.mainloop()

# practice problem number 2
import csv
from datetime import datetime

# Given events
events = [
    {"event": "login", "timestamp": "2023-10-15 08:10:05"},
    {"event": "logout", "timestamp": "2023-10-15 10:12:40"},
    {"event": "login", "timestamp": "2023-10-15 11:05:10"}
]

# Write events to CSV file
csv_file_path = "events_log.csv"
with open(csv_file_path, mode='w', newline='') as file:
    fieldnames = ['Event', 'Timestamp']
    writer = csv.DictWriter(file, fieldnames=fieldnames)

    # Write header
    writer.writeheader()

    # Write events in chronological order
    sorted_events = sorted(events, key=lambda x: datetime.strptime(x['timestamp'], "%Y-%m-%d %H:%M:%S"))
    for event in sorted_events:
        writer.writerow(event)

print(f"Events written to {csv_file_path}")

# Read the CSV file and display events
with open(csv_file_path, mode='r') as file:
    reader = csv.DictReader(file)
    
    print("\nEvents in chronological order:")
    for row in reader:
        print(f"Event: {row['Event']}, Timestamp: {row['Timestamp']}")

#practice problem number 3
have t kinter installed or else you can use this code
pip install tk

import tkinter as tk
from tkinter import ttk
import sqlite3
from tkinter import messagebox
import locale

locale.setlocale(locale.LC_ALL, '')  # Set the locale for currency formatting

class ProductManager:
    def __init__(self, root):
        self.root = root
        self.root.title("Product Manager")

        # SQLite Database
        self.conn = sqlite3.connect("products.db")
        self.cursor = self.conn.cursor()

        # Create Products table if not exists
        self.cursor.execute('''
            CREATE TABLE IF NOT EXISTS products (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                name TEXT,
                price REAL,
                stock_count INTEGER
            )
        ''')
        self.conn.commit()

        # GUI Elements
        self.product_name_label = tk.Label(root, text="Product Name:")
        self.product_name_label.grid(row=0, column=0, padx=5, pady=5, sticky=tk.E)

        self.product_name_entry = tk.Entry(root)
        self.product_name_entry.grid(row=0, column=1, padx=5, pady=5)

        self.price_label = tk.Label(root, text="Price:")
        self.price_label.grid(row=1, column=0, padx=5, pady=5, sticky=tk.E)

        self.price_entry = tk.Entry(root)
        self.price_entry.grid(row=1, column=1, padx=5, pady=5)

        self.stock_count_label = tk.Label(root, text="Stock Count:")
        self.stock_count_label.grid(row=2, column=0, padx=5, pady=5, sticky=tk.E)

        self.stock_count_entry = tk.Entry(root)
        self.stock_count_entry.grid(row=2, column=1, padx=5, pady=5)

        self.add_button = tk.Button(root, text="Add Product", command=self.add_product)
        self.add_button.grid(row=3, column=0, columnspan=2, pady=10)

        self.fetch_button = tk.Button(root, text="Fetch Products", command=self.fetch_products)
        self.fetch_button.grid(row=4, column=0, columnspan=2, pady=10)

        self.sort_button = tk.Button(root, text="Sort Products by Price", command=self.sort_products)
        self.sort_button.grid(row=5, column=0, columnspan=2, pady=10)

        # Treeview for displaying products
        self.tree = ttk.Treeview(root, columns=("Product Name", "Price", "Stock Count"), show="headings")
        self.tree.heading("Product Name", text="Product Name")
        self.tree.heading("Price", text="Price")
        self.tree.heading("Stock Count", text="Stock Count")
        self.tree.grid(row=6, column=0, columnspan=2, padx=5, pady=5)

    def add_product(self):
        try:
            name = self.product_name_entry.get()
            price = float(self.price_entry.get())
            stock_count = int(self.stock_count_entry.get())

            self.cursor.execute('''
                INSERT INTO products (name, price, stock_count) VALUES (?, ?, ?)
            ''', (name, price, stock_count))

            self.conn.commit()
            messagebox.showinfo("Success", "Product added successfully.")
            self.clear_entries()
        except Exception as e:
            messagebox.showerror("Error", f"Error: {e}")

    def fetch_products(self):
        self.tree.delete(*self.tree.get_children())  # Clear previous entries
        self.cursor.execute("SELECT * FROM products")
        rows = self.cursor.fetchall()

        for row in rows:
            product_name, price, stock_count = row
            self.tree.insert("", "end", values=(product_name, locale.currency(price), stock_count))

    def sort_products(self):
        current_data = self.tree.get_children()
        current_data = sorted(current_data, key=lambda x: float(self.tree.item(x, 'values')[1].replace('$', '').replace(',', '')))
        for i, item in enumerate(current_data):
            self.tree.move(item, '', i)

    def clear_entries(self):
        self.product_name_entry.delete(0, tk.END)
        self.price_entry.delete(0, tk.END)
        self.stock_count_entry.delete(0, tk.END)

if __name__ == "__main__":
    root = tk.Tk()
    app = ProductManager(root)
    root.mainloop()



